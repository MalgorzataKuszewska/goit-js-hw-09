{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIb,MAAMQ,EAAcC,SAASC,cAAc,SAC3CF,EAAYG,iBAAiB,UAAUC,IACrCA,EAAEC,iBAEF,MAAMC,EAAW,IAAIC,SAASP,GACxBQ,EAAaC,SAASH,EAASI,IAAI,UACnCC,EAAYF,SAASH,EAASI,IAAI,SAClCE,EAASH,SAASH,EAASI,IAAI,WAErC,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAG/BvB,EAFiBuB,EAAI,EACPL,EAAaK,EAAIF,GAE5BG,MAAKC,IACJC,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqBH,EAAIxB,eAAoBwB,EAAEvB,UAAe,IAGjE2B,OAAMC,IACLJ,EAAA5B,GAAS6B,OAAOI,QACd,sBAAoBD,EAAE7B,eAAmB6B,EAAE5B,UAAc,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst promiseForm = document.querySelector('.form');\npromiseForm.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const formData = new FormData(promiseForm);\n  const firstDelay = parseInt(formData.get('delay'));\n  const delayStep = parseInt(formData.get('step'));\n  const amount = parseInt(formData.get('amount'));\n\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const delay = firstDelay + i * delayStep;\n    createPromise(position, delay)\n      .then(result => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${result.position} in ${result.delay}ms`\n        );\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${error.position} in ${error.delay}ms`\n        );\n      });\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$promiseForm","document","querySelector","addEventListener","e","preventDefault","formData","FormData","firstDelay","parseInt","get","delayStep","amount","i","then","result","$parcel$interopDefault","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.9333f116.js.map"}